
" set the runtime path to include Vundle and initialize
let mapleader = ","

" git clone https://github.com/VundleVim/Vundle.vim.git  ~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
" let Vundle manage Vundle
Plugin 'VundleVim/Vundle.vim'
"my Bundle here:
" original repos on github
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'jiangmiao/auto-pairs'
Plugin 'altercation/vim-colors-solarized'
Plugin 't9md/vim-quickhl'
Plugin 'bling/vim-airline'
"..................................
" vim-scripts repos
Plugin 'cscope.vim'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
call vundle#end()            " required

filetype on
filetype plugin on
filetype plugin indent on

" solarised
syntax enable
syntax on
set background=dark
colorscheme solarized

" ctrlp
let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlP'

" for ultisnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-k>"
"let g:UltiSnipsJumpBackwardTrigger="<c-j>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

"for airline'
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'

" 是否打开tabline
" let g:airline#extensions#tabline#enabled = 1
set noswapfile

" *.cpp 和 *.h 间切换
nmap <silent> <Leader>sw :FSHere<cr>

"quickfix store cscope result
" set cscopequickfix=c-,d-,e-,g-,i-,s-,t-

" for nerd tree
nmap <F2> ;NERDTreeToggle<CR>
let NERDTreeWinPos="right"
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif






" m[a-z]
" ' + [a-z]


" 搜索时大小写不敏感
" set ignorecase

" 关闭兼容模式
set nocompatible

" 开启实时搜索功能
set incsearch

" vim 自身命令行模式智能补全
set wildmenu

" 总是显示状态栏
set laststatus=2
set ruler
set statusline="%t%m"

" 打开行号 和相对行号
set nu
set relativenumber
set backspace=2
set foldlevelstart=99
set hlsearch
set shiftwidth=4
set softtabstop=4

" tab 4 space
set tabstop=4

set encoding=utf-8 nobomb
set fileencodings=ucs-bom,utf-8,cp936

set binary
set noeol

set modeline
set modelines=4

" disable error bells
set noerrorbells

set showmode

set title

set showcmd
set showmatch
set formatoptions-=r
"set shell=bash\ -i

"for markdown preview
let g:instant_markdown_autostart =0
nmap <silent> <leader>f ;InstantMarkdownPreview<cr>

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K> 
nnoremap <C-L> <C-W><C-L> 
nnoremap <C-H> <C-W><C-H> 

" nmap <leader>q ;q!<CR>
" nmap <leader>w ;w<CR>
" nmap <leader>wq ;wq<CR>

autocmd BufWritePost $MYVIMRC source $MYVIMRC

nnoremap ; :
nnoremap : ;

"再次打开光标位置在上次退出时的位置
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif  

" 打开光标行死高亮
" set cursorcolumn "CursorColumn
set cursorline
set cursorcolumn

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cscope setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")
  set csprg=/usr/local/bin/cscope
  set csto=1
  set cst
  set nocsverb
  " add any database in current directory
  if filereadable("cscope.out")
      cs add cscope.out
  endif
  set csverb
nmap <Leader>cs ;cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>cg ;cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>cc ;cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>ct ;cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>ce ;cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <Leader>cf ;cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <Leader>ci ;cs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <Leader>cd ;cs find d <C-R>=expand("<cword>")<CR><CR>
endif